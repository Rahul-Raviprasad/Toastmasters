/*

*/

angular
  .module('app', ['ui.router', 'app.clubs', 'app.profile', 'app.meeting'])
  .config(routeConfig);

  routeConfig.$inject = ['$stateProvider'];

  function routeConfig($stateProvider) {
    $stateProvider
      .state('home', {
        url: '/',
        templateUrl: 'templates/home.tpl.html'
      })
  }

(function() {
  angular
    .module('app.clubsController', ['mock.clubs.service'])
    .controller('ClubsController', ClubsController);

  ClubsController.$inject = ['$scope', 'ClubService'];

  function ClubsController($scope, ClubService) {
    var vm = this;

    ClubService.getClubs()
      .then(function(response) {
        vm.clubs = response.clubs;
      });
  }
})();

angular
  .module('app.clubs', [ 'app.clubs.routes', 'app.clubsController']);

(function () {
  angular
    .module('app.clubs.routes',[])
    .config(routeConfig);

  routeConfig.$inject = ['$stateProvider'];

  function routeConfig($stateProvider) {
    $stateProvider
      .state('clubs', {
        url: '/clubs',
        templateUrl: 'js/app/clubs/templates/clubs-list.tpl.html',
        controller: 'ClubsController',
        controllerAs: 'vm',
        data: {
          pageTitle: 'Clubs'
        }
      })
      // .state('clubs.details', {
      //   url: '/clubs/detailsID',
      //   templateUrl: '',
      //   controller: 'ClubsController',
      //   controllerAs: 'vm'
      // })
  }

})();

angular
  .module('app.clubsService', ['app.common.auth'])
  .factory('ClubService', ClubService);

ClubService.$inject = ['$q', '$http', 'AuthenticationService'];

function ClubService($q, $http, AuthenticationService) {
  var vm = this;

  vm.getClubs = getClubs;

  return vm;

  /////////----------------------------------------------

  function getClubs() {
    AuthenticationService.SetCredentials('username', 'password');

    return $http.get('https://rahulraviprasad.service-now.com/api/now/table/x_snc_toastmaster1_clubs?sysparm_fields=name%2Cshort_description');
    // return $q.when({
    //   clubs: [
    //     {
    //       name: 'Hyderabad',
    //       description: "A cool place to hangout and learn"
    //     },
    //     {
    //       name: 'Data Science group',
    //       description: 'meet some of the most enthusiatic data scientist'
    //     },
    //     {
    //       name: 'Football group',
    //       description: 'play soccer and get some cardio done as well'
    //     }
    //   ]
    // });
  }
}

(function() {
  angular
    .module('mock.clubs.service', [])
    .factory('ClubService', ClubService);

  ClubService.$inject = ['$q'];

  function ClubService($q) {
    var vm = this;

    vm.getClubs = getClubs;

    return vm;
    // -----------------------------------

    function getClubs() {
      return $q.when({
        clubs: [
          {
            name: 'Hyderabad',
            description: "A cool place to hangout and learn"
          },
          {
            name: 'Data Science group',
            description: 'meet some of the most enthusiatic data scientist'
          },
          {
            name: 'Football group',
            description: 'play soccer and get some cardio done as well'
          }
        ]
      });
    }
  }
})();

(function() {
  angular
    .module('app.meetingsService', [])
    .factory('MeetingsService', MeetingsService);

  MeetingsService.$inject = ['$q'];

  function MeetingsService($q) {
    var vm = this;

    vm.getMeetings = getMeetings;

    return vm;

    //// -----------------------------

    function getMeetings(ClubName) {
      return $q.when([{
        name: 'Saturday meet',
        location: 'nalanada'
      },
      {
        name: 'Sunday meet',
        location: 'nalanada'
      }]);
    }
  }
})();

(function() {
  angular
    .module('app.meeting', ['app.meetings.routes', 'app.meetingsController']);
})();

(function() {
  angular
    .module('app.meetings.routes', [])
    .config(routeConfig);

  routeConfig.$inject = ['$stateProvider'];

  function routeConfig($stateProvider) {
    $stateProvider
      .state('meetings', {
        url: '/meetings',
        templateUrl: 'js/app/meetings/templates/meetings.tpl.html',
        controller: 'ClubsController',
        controllerAs: 'vm'
      });

  }
})();

(function(){
  angular
    .module('app.meetingsController', ['app.meetingsService'])
    .controller('MeetingsController', MeetingsController);

  MeetingsController.$inject = ['MeetingsService'];

  function MeetingsController(MeetingsService) {
    var vm  = this;
    vm.name = "hi";
    MeetingsService.getMeetings('club1')
      .then(function(response) {
        vm.meetings = response;
      });




  }

})();

(function() {
  angular
    .module('app.common.auth', ['app.common'])
    .factory('AuthenticationService', AuthenticationService);

  AuthenticationService.$inject = ['Base64', '$http', '$rootScope', '$timeout'];

  function AuthenticationService(Base64, $http, $rootScope, $timeout) {
        var service = {};

        service.Login = function (username, password, callback) {

            /* Dummy authentication for testing, uses $timeout to simulate api call
             ----------------------------------------------*/
            $timeout(function(){
                var response = { success: username === 'test' && password === 'test' };
                if(!response.success) {
                    response.message = 'Username or password is incorrect';
                }
                callback(response);
            }, 1000);


            /* Use this for real authentication
             ----------------------------------------------*/
            //$http.post('/api/authenticate', { username: username, password: password })
            //    .success(function (response) {
            //        callback(response);
            //    });

        };

        service.SetCredentials = function (username, password) {
            var authdata = Base64.encode(username + ':' + password);

            $rootScope.globals = {
                currentUser: {
                    username: username,
                    authdata: authdata
                }
            };

            $http.defaults.headers.common['Authorization'] = 'Basic ' + authdata; // jshint ignore:line
            //$cookieStore.put('globals', $rootScope.globals);
        };

        service.ClearCredentials = function () {
            $rootScope.globals = {};
          //  $cookieStore.remove('globals');
            $http.defaults.headers.common.Authorization = 'Basic ';
        };

        return service;
    }

})();

(function() {
  angular
    .module('app.common', [])
    .factory('Base64', Base64);

  Base64.$inject = [];

  function Base64() {
    /* jshint ignore:start */

    var keyStr = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/=';

    return {
        encode: function (input) {
            var output = "";
            var chr1, chr2, chr3 = "";
            var enc1, enc2, enc3, enc4 = "";
            var i = 0;

            do {
                chr1 = input.charCodeAt(i++);
                chr2 = input.charCodeAt(i++);
                chr3 = input.charCodeAt(i++);

                enc1 = chr1 >> 2;
                enc2 = ((chr1 & 3) << 4) | (chr2 >> 4);
                enc3 = ((chr2 & 15) << 2) | (chr3 >> 6);
                enc4 = chr3 & 63;

                if (isNaN(chr2)) {
                    enc3 = enc4 = 64;
                } else if (isNaN(chr3)) {
                    enc4 = 64;
                }

                output = output +
                    keyStr.charAt(enc1) +
                    keyStr.charAt(enc2) +
                    keyStr.charAt(enc3) +
                    keyStr.charAt(enc4);
                chr1 = chr2 = chr3 = "";
                enc1 = enc2 = enc3 = enc4 = "";
            } while (i < input.length);

            return output;
        },

        decode: function (input) {
            var output = "";
            var chr1, chr2, chr3 = "";
            var enc1, enc2, enc3, enc4 = "";
            var i = 0;

            // remove all characters that are not A-Z, a-z, 0-9, +, /, or =
            var base64test = /[^A-Za-z0-9\+\/\=]/g;
            if (base64test.exec(input)) {
                window.alert("There were invalid base64 characters in the input text.\n" +
                    "Valid base64 characters are A-Z, a-z, 0-9, '+', '/',and '='\n" +
                    "Expect errors in decoding.");
            }
            input = input.replace(/[^A-Za-z0-9\+\/\=]/g, "");

            do {
                enc1 = keyStr.indexOf(input.charAt(i++));
                enc2 = keyStr.indexOf(input.charAt(i++));
                enc3 = keyStr.indexOf(input.charAt(i++));
                enc4 = keyStr.indexOf(input.charAt(i++));

                chr1 = (enc1 << 2) | (enc2 >> 4);
                chr2 = ((enc2 & 15) << 4) | (enc3 >> 2);
                chr3 = ((enc3 & 3) << 6) | enc4;

                output = output + String.fromCharCode(chr1);

                if (enc3 != 64) {
                    output = output + String.fromCharCode(chr2);
                }
                if (enc4 != 64) {
                    output = output + String.fromCharCode(chr3);
                }

                chr1 = chr2 = chr3 = "";
                enc1 = enc2 = enc3 = enc4 = "";

            } while (i < input.length);

            return output;
        }
    };

    /* jshint ignore:end */
}
})();

(function() {
  angular
    .module('app.profileController', ['app.profileService'])
    .controller('ProfileController', ProfileController);

  ProfileController.$inject = ['ProfileService'];
  function ProfileController(ProfileService) {
    var vm =  this;

    ProfileService.getProfile()
                  .then(function(response) {
                    vm.profile = response;
                  });
  }
})();

(function() {
  angular
    .module('app.profile', ['app.profileController'])
})();

(function() {
  angular
    .module('app.profileService', [])
    .factory('ProfileService', ProfileService);

  ProfileService.$inject = ['$q'];

  function ProfileService($q) {
    var vm =  this;

    vm.getProfile =  getProfile;

    return vm;

    // ---------------------------------------------------
    function getProfile() {
      return $q.when({
        firstName: 'Rahul',
        lastName: 'Raviprasad',
        roles: ['admin', 'member']
      });
    }
  }
})();
